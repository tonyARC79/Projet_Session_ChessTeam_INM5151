


Pour le front-end:
- ChessBoard.js fonctionne deja selon la derniere version de JQuery donc on pourrait continuer avec ça.
- Sinon, vù que Rodolphe connait Vue.js, on pourrait faire le reste avec ça. C'est plus facile que React et Angular. GOOD

Pour le backend:
1 - Soit python avec Flask (vù que l'app web sera pas faite pour handle des milliers de users)
2 - Ou Django pour essayer d'apprendre un meilleur API en python (Mais ça va nous prendre un peu plus de temps se familiariser avec.)
3 - Ou on fait tout en JS avec NodeJs puis on utilise ExpressJS pcq Antoine le connait bien. GOOD


Pour la DB:
1. Sqlite (La seule que je maitrise)
2. Mysql (Bcp de doc disponible en ligne et est supposé être "rapide") GOOD
3. MongoDB (par contre c'est du Nosql donc je sais pas comment le learning curve va être...)
 


Fonctionnalites:
- Multiplayer
- Comptes utilisateurs
- Historique des games joué en mode multiplayer
- Bots de différent niveau (Exemple: 3 ou 4 niveaux)
- Liste des openings/strategies.
- Analyse exhaustive des parties(Peut etre un peu too much)
- Score pour chacune des parties accumulé selon les chaque user
- chat entre les users qui joue en meme temps
- Possibilité de messagerie hors game (sans devoir jouer en live)
- Ajouter des contacts/friends qui possedent un user account.
- Training exercices customizé
- Mode de jeux : temps, bullet, rapid mode, min, etc
- 




Tools/tech choisies pour le projet:
- Font-end: VueJS
- Backend: NodeJS avec ExpressJs API
- DB : Mysql
- outil de planif : Jira 
