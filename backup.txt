<template>
  <div>
    <div>
      <div
        id="myBoard"
        style="width: 500px; text-align: center; margin: auto"
      ></div>
      <!-- <label>Status:</label> -->
      <!-- <div id="status"></div>
      <div id="fen"></div> -->
    </div>
    <!-- <div v-else-if=""></div> -->

    <!-- <div v-if="nbPlayer == 1"><br><br>{{waitingMsg}}</div> -->
    <!-- <button v-if="!gameAccepted" class="btn btn-sm btn-primary w-100 ml-2" v-on:click="playerJoinsGame">{{joinMsg}}</button> -->
    <div id='state'></div>
  </div>
</template>

<script>
/* eslint-disable no-unused-vars */

//const imgPath = "../static/img/chesspieces/wikipedia/";
import $ from "jquery";
import Chessboard from "chessboardjs";
import Chess from "chess.js";
import io from "socket.io-client";
import bPawn from "../static/img/chesspieces/wikipedia/bP.png";
import bKing from "../static/img/chesspieces/wikipedia/bK.png";
import bQueen from "../static/img/chesspieces/wikipedia/bQ.png";
import bBishop from "../static/img/chesspieces/wikipedia/bB.png";
import bKnight from "../static/img/chesspieces/wikipedia/bN.png";
import bRook from "../static/img/chesspieces/wikipedia/bR.png";
import wPawn from "../static/img/chesspieces/wikipedia/wP.png";
import wKing from "../static/img/chesspieces/wikipedia/wK.png";
import wQueen from "../static/img/chesspieces/wikipedia/wQ.png";
import wBishop from "../static/img/chesspieces/wikipedia/wB.png";
import wKnight from "../static/img/chesspieces/wikipedia/wN.png";
import wRook from "../static/img/chesspieces/wikipedia/wR.png";

export default {
  name: "GameRoom",
  data: function () {
    return {
      nbPlayer: 0,
      waitingMsg: "",
      joinMsg: "Joindre la partie",
      gameAccepted: false,
      socket: null
      
    };
  },
  // methods: {
  //   playerJoinsGame(){
  //     this.nbPlayer += 1;
  //     this.waitingMsg = 'Votre adversaire se pr√©pare...';
  //     this.gameAccepted = true;
  //   }
  // },
  created(){

  },
  mounted() {
    /* eslint-disable no-unused-vars */
    var board = null;
    var socket = io("http://localhost:5000", { transports: ["websocket"] });
    var color = "white";
    var players;
    var play = true;
    var roomId;

    var room = document.getElementById("room");
    var roomNumber = document.getElementById("roomNumbers");
    var button = document.getElementById("button");
    var state = document.getElementById("state");
    var game = new Chess();
    var $status = $("#status");
    var $fen = $("#fen");
    var $pgn = $("#pgn");

    var connect = function () {
      roomId = room.value;
      if (roomId !== "" && parseInt(roomId) <= 100) {
        room.remove();
        roomNumber.innerHTML = "Room Number " + roomId;
        button.remove();
        socket.emit("joined", roomId);
      }
    };

    // socket.on("full", function (msg) {
    //   if (roomId == msg)
    //     window.location.assign(window.location.href + "full.html");
    // });

    socket.on("play", function (msg) {
      if (msg == roomId) {
        play = false;
        state.innerHTML = "Game in progress";
      }
      // console.log(msg)
    });

    socket.on("move", function (msg) {
      if (msg.room == roomId) {
        game.move(msg.move);
        board.position(game.fen());
        console.log("moved : " + msg.move);
      }
    });
    function pieceTheme(piece) {
      // wikipedia theme for white pieces
      if (piece.search(/w/) !== -1) {
        if (piece.charAt(1) == "P") {
          return wPawn;
        } else if (piece.charAt(1) == "K") {
          return wKing;
        } else if (piece.charAt(1) == "Q") {
          return wQueen;
        } else if (piece.charAt(1) == "B") {
          return wBishop;
        } else if (piece.charAt(1) == "N") {
          return wKnight;
        } else if (piece.charAt(1) == "R") {
          return wRook;
        }

        // return "../static/img/chesspieces/wikipedia/" + piece + ".png";
      } else {
        // alpha theme for black pieces
        //return "img/chesspieces/alpha/" + piece + ".png";
        if (piece.charAt(1) == "P") {
          return bPawn;
        } else if (piece.charAt(1) == "K") {
          return bKing;
        } else if (piece.charAt(1) == "Q") {
          return bQueen;
        } else if (piece.charAt(1) == "B") {
          return bBishop;
        } else if (piece.charAt(1) == "N") {
          return bKnight;
        } else if (piece.charAt(1) == "R") {
          return bRook;
        }
      }
    }
    function onDragStart(source, piece) {
      // do not pick up pieces if the game is over
      if (game.game_over()) return false;

      // only pick up pieces for the side to move
      if (
        (game.turn() === "w" && piece.search(/^b/) !== -1) ||
        (game.turn() === "b" && piece.search(/^w/) !== -1)
      ) {
        return false;
      }
      //   if (game.game_over() === true || play ||
      //     (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      //     (game.turn() === 'b' && piece.search(/^w/) !== -1) ||
      //     (game.turn() === 'w' && color === 'black') ||
      //     (game.turn() === 'b' && color === 'white') ) {
      //         return false;
      // }
    }

    function onDrop(source, target) {
      // see if the move is legal
      var move = game.move({
        from: source,
        to: target,
        promotion: "q", // NOTE: always promote to a queen for example simplicity
      });

      if (game.game_over()) {
        socket.emit("gameOver", roomId);
      }
      // illegal move
      if (move === null) return "snapback";
      else socket.emit("move", { move: move, board: game.fen(), room: roomId });
    }

    // update the board position after the piece snap
    // for castling, en passant, pawn promotion
    function onSnapEnd() {
      board.position(game.fen());
    }

    function updateStatus() {
      var status = "";

      var moveColor = "White";
      if (game.turn() === "b") {
        moveColor = "Black";
      }

      // checkmate?
      if (game.in_checkmate()) {
        status = "Game over, " + moveColor + " is in checkmate.";
      }

      // draw?
      else if (game.in_draw()) {
        status = "Game over, drawn position";
      }

      // game still on
      else {
        status = moveColor + " to move";

        // check?
        if (game.in_check()) {
          status += ", " + moveColor + " is in check";
        }
      }

      $status.html(status);
      $fen.html(game.fen());
      $pgn.html(game.pgn());
    }

    var config = {
      orientation:color,
      pieceTheme: pieceTheme,
      draggable: true,
      position: "start",
      onDragStart: onDragStart,
      onDrop: onDrop,
      onSnapEnd: onSnapEnd,
    };
    board = Chessboard("myBoard", config);
    updateStatus();
  },
};
</script>
<style lang="">
</style>